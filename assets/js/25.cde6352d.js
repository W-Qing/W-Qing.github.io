(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{329:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"entry-与-output-的基础配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#entry-与-output-的基础配置","aria-hidden":"true"}},[t._v("#")]),t._v(" Entry 与 Output 的基础配置")]),t._v(" "),s("p",[t._v("通过 "),s("a",{attrs:{href:"https://sunburst.wang/posts/2018/12/28/webpack-quick-start.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《webpack 快速入门》"),s("OutboundLink")],1),t._v(" 的基础学习，已经了解到应用程序通过 webpack 执行打包的入口 entry 及文件输出 output。它们的默认值分别是 "),s("code",[t._v("'./src'")]),t._v(" 和 "),s("code",[t._v("main.js")]),t._v("。")]),t._v(" "),s("p",[t._v("但如果我们的项目是一个可能会有多个入口文件的多页面的应用。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    home"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./home.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    about"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./about.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    contact"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./contact.js'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("那么此时 output 下的配置也要进行相应的更改。最简单的方式就是通过占位符去设置打包输出的文件名。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("output"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  publicPath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://cdn.com'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或指定目录 '/assets/',")]),t._v("\n  filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[name].js'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// name 占位符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打包输出 home.js、about.js、contact.js")]),t._v("\n")])])]),s("p",[t._v("很多时候我们可能会将打包生成的文件给后端或者将资源托管到 CDN 时。那么我们在打包生成的 html 文件内去引用这些文件就需要一个指定的 URL 前缀。打包后的文件在 html 内的引用方式会如下所示：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://cdn.com/about.js"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token script"}}),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("查阅文档，学习更多 "),s("a",{attrs:{href:"https://webpack.docschina.org/configuration/entry-context/#entry",target:"_blank",rel:"noopener noreferrer"}},[t._v("entry"),s("OutboundLink")],1),t._v(" 与 "),s("a",{attrs:{href:"https://webpack.docschina.org/configuration/output/",target:"_blank",rel:"noopener noreferrer"}},[t._v("output"),s("OutboundLink")],1),t._v(" 的配置参数以及 "),s("a",{attrs:{href:"https://webpack.docschina.org/guides/output-management/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Output Management"),s("OutboundLink")],1),t._v(" 的知识。")]),t._v(" "),s("h2",{attrs:{id:"source-map-的配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#source-map-的配置","aria-hidden":"true"}},[t._v("#")]),t._v(" Source Map 的配置")]),t._v(" "),s("p",[t._v("当 webpack 打包源代码时，可能会很难追踪到 error（错误） 和 warning（警告） 在源代码中的原始位置。")]),t._v(" "),s("p",[t._v("例如，如果将三个源文件（"),s("code",[t._v("a.js")]),t._v(", "),s("code",[t._v("b.js")]),t._v(" 和 "),s("code",[t._v("c.js")]),t._v("）打包到一个 bundle（"),s("code",[t._v("bundle.js")]),t._v("）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直接指向到 "),s("code",[t._v("bundle.js")]),t._v("。你可能需要准确地知道错误来自于哪个源文件，所以这种提示这通常不会提供太多帮助。")]),t._v(" "),s("p",[t._v("为了更容易地追踪 error 和 warning，JavaScript 提供了 "),s("a",{attrs:{href:"http://blog.teamtreehouse.com/introduction-source-maps",target:"_blank",rel:"noopener noreferrer"}},[t._v("source map"),s("OutboundLink")],1),t._v(" 功能（一个映射关系），可以将编译后的代码映射回原始源代码。")]),t._v(" "),s("p",[t._v("通过设置 webpack 的 devtool 属性就可以配置 Scource Map。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\nmode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'development'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开发环境")]),t._v("\ndevtool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source-map'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认为 none")]),t._v("\n")])])]),s("p",[t._v("重新打包后，如果有报错或者警告信息那么就可以通过控制台提示定位到对应位置的代码。")]),t._v(" "),s("p",[t._v("同时 dist 目录下会增加一个 "),s("code",[t._v("bundle.js.map")]),t._v(" 文件。打包后的文件代码与源代码就是通过这个文件进行映射的。")]),t._v(" "),s("p",[t._v("查看文档，webpack 提供了十几种 "),s("a",{attrs:{href:"https://webpack.docschina.org/configuration/devtool/",target:"_blank",rel:"noopener noreferrer"}},[t._v("source map"),s("OutboundLink")],1),t._v(" 的配置格式。其中：")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("inline-source-map")])]),t._v(" "),s("p",[t._v("效果与 source map 一致，区别在于这种方式不会生成 map 文件，而是将其映射关系的内容通过 dataUrl 的方式直接写入到打包后的 bundle.js 文件底部。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("inline-cheap-source-map")])]),t._v(" "),s("p",[t._v("上面提到的配置格式，在提示错误和警告信息的时候，会帮我们精确到项目文件代码中的具体某行某列。")]),t._v(" "),s("p",[t._v("而加了 cheap 之后，它只会精确到行，而不会精确到哪一列。同时，它会只关心我们写的业务代码，不再关心其他部分的代码，所以这种方式的构建过程就会变得比较快。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("inline-cheap-module-source-map")])]),t._v(" "),s("p",[t._v("如果我们在 cheap 的基础上还想让 webpack 为我们提供 loader、第三方模块等部分代码的错误信息，那么可以加上 module 关键字。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("eval")])]),t._v(" "),s("p",[t._v("效果与 source map 的方式是一样的，但是 dist 目录下不会生成 map 文件，同时 bundle.js 文件底部也没有 Base64 的 dataUrl 字段。但是有一个 eval() 方法，所以它是通过 eval 的 js 执行形式来生成 source map 的对应关系的。")]),t._v(" "),s("p",[t._v("这种方式是执行效率最快，性能最好的方式，但缺点是针对于比较复杂的代码情况下，不能正确的显示行数。")])])]),t._v(" "),s("p",[s("strong",[t._v("最佳实践：")])]),t._v(" "),s("ul",[s("li",[t._v("开发环境 development: "),s("code",[t._v("cheap-module-eval-source-map")])]),t._v(" "),s("li",[t._v("生成环境 production: "),s("code",[t._v("none")]),t._v(" 或 "),s("code",[t._v("cheap-module-source-map")])]),t._v(" "),s("li",[t._v("或者使用 "),s("a",{attrs:{href:"https://webpack.docschina.org/plugins/source-map-dev-tool-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("SourceMapDevToolPlugin"),s("OutboundLink")],1),t._v(" 进行更细粒度的配置。("),s("em",[t._v("切勿和 devtool 选项同时使用")]),t._v(" )")])]),t._v(" "),s("h2",{attrs:{id:"hot-module-replace-热模块更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hot-module-replace-热模块更新","aria-hidden":"true"}},[t._v("#")]),t._v(" Hot Module Replace 热模块更新")]),t._v(" "),s("p",[t._v("在我们使用 webpack-dev-server 实现代码的热加载之后，每次源代码有改动，这个本地服务器就会自动帮我们打包并刷新浏览器。这确实很方便，但其实有时候我们其实却并不希望它去刷新页面。")]),t._v(" "),s("blockquote",[s("p",[t._v("比如，我们在页面上通过很多的点击交互操作，最终在页面显示出一个特定列表。然后为了修改列表项样式，我们对源代码做了更改。如果此时 webpack-dev-server 帮我们自动刷新浏览器页面了，那我们就需要再重新进行一遍点击操作才能看到更改样式后的列表… 😟")])]),t._v(" "),s("p",[t._v("此时我们就可以使用 webpack-dev-server 的热模块更新功能 (HMR)。")]),t._v(" "),s("ol",[s("li",[t._v("修改 devServer 配置项")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("devServer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8086")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  hot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开启 hmr 功能")]),t._v("\n  hotOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可选，意思是即使 hrm 不生效，浏览器也不刷新")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("引入 HotModuleReplacementPlugin 插件 (webpack 自带）")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先引入 webpack")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" webpack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'webpack'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\nplugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HtmlWebpackPlugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ttemplate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./src/index.html'")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用插件")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("webpack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HotModuleReplacementPlugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("重启一下"),s("code",[t._v("npm start")]),t._v(" 使修改后的配置文件生效")])]),t._v(" "),s("p",[t._v("关于热模块替换的更多用法指南、及实现原理、API 用法可以翻阅以下文档：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://webpack.docschina.org/guides/hot-module-replacement/",target:"_blank",rel:"noopener noreferrer"}},[t._v("指南"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://webpack.docschina.org/concepts/hot-module-replacement",target:"_blank",rel:"noopener noreferrer"}},[t._v("概念"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://webpack.docschina.org/api/hot-module-replacement",target:"_blank",rel:"noopener noreferrer"}},[t._v("API"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"tree-shaking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking","aria-hidden":"true"}},[t._v("#")]),t._v(" Tree Shaking")]),t._v(" "),s("p",[t._v("开发过程中我们经常会需要 import 一些外部的公共方法来实现方法复用，但我们大多数时候都是只需要这个公共方法模块里的几个方法，而不是全部。借助 Tree Shaking，我们就可以将模块中没有用到的方法摇晃掉。")]),t._v(" "),s("blockquote",[s("p",[t._v("Tree Shaking 只支持 ES module 这种静态的 import 的模块引入方式，而不支持 common js 动态的 require 引入方式。")])]),t._v(" "),s("p",[s("strong",[t._v("配置：")]),t._v(" 默认的开发模"),s("code",[t._v("mode: 'development'")]),t._v("  是没有 tree shaking 功能的，要想加上 tree shaking 首先在配置文件中加入 optimization 配置项。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  optimization"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    usedExports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只将使用到的导出模块进行打包")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("但是这样会可能遗漏掉那些不导出任何内容的模块。实际上，只要 import 引入一个模块，Tree Shaking 就会检查这个模块导出了什么，代码引用了什么，如果没有导出或者没有引用，就会忽略这个模块引入。")]),t._v(" "),s("p",[t._v("比如"),s("code",[t._v("@babel/poly-fill")]),t._v("这种只是单纯地在 window 对象上绑定了一些全局变量而不导出内容的模块，还有代码里引入的一些样式 CSS 或 SCSS 文件。")]),t._v(" "),s("p",[t._v("此时要在 package.json 中加入"),s("code",[t._v("sideEffects")]),t._v("配置，将这些需要特殊处理的模块放进一个数组里。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'webpack-demo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sideEffects"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@babel/poly-fill"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*.css"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*.scss"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果业务逻辑里没有要特殊处理的模块就直接将 sideEffects 设为 false")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "sideEffects:false"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("其实 Development 模式下，即使我们配置了 tree shaking ，它也不会将你不用的代码从打包后的 main.js 中剔除掉，而只是在注释中提醒你一下。🌚")]),t._v(" "),s("p",[t._v("这是因为我们在开发环境生成的代码一般都需要做一些调试，如果 tree shaking 把一些代码删除掉的话，sourceMap 代码对应的一些行数就会错误，所以开发环境下的 tree shaking 还会保留这些代码。但是如果我们真正的要将项目打包上线，将 mode 改为 production，那么它就会生效了。但同时要注意这时我们的 devtool 属性在生成环境一般都使用"),s("code",[t._v("cheap-module-source-map")]),t._v("而不是带 eval 的配置。")]),t._v(" "),s("p",[t._v("另外在生产环境下，我们甚至都不用写上面的 optimization 配置，它会默认按这个配置去执行。但是 sideEffects 还是要自己配置的。🤪")]),t._v(" "),s("h2",{attrs:{id:"code-splitting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#code-splitting","aria-hidden":"true"}},[t._v("#")]),t._v(" Code Splitting")])])},[],!1,null,null,null);a.default=n.exports}}]);